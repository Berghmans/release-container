name: build-test

on: # yamllint disable-line rule:truthy
  push:
    branches:
      - "**"
    tags-ignore:
      - "v*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/release-container
  PYTHON_VERSION: "3.12.3"
  NODE_VERSION: "20.x"
  TEST_TAG: "release-container:test"

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          platforms: linux/amd64
          tags: ${{ env.TEST_TAG }}
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            NODE_VERSION=${{ env.NODE_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - run: docker run --rm ${{ env.TEST_TAG }} "python --version"
      - run: docker run --rm ${{ env.TEST_TAG }} "node --version"
      - run: docker run --rm ${{ env.TEST_TAG }} "semantic-release --version"
      - run: docker run --rm ${{ env.TEST_TAG }} "invoke --version"
      - run: docker run --rm ${{ env.TEST_TAG }} "cfn-lint --version"
      - run: docker run --rm ${{ env.TEST_TAG }} "pylint --version"
      - name: boto3 version
        run: docker run --rm ${{ env.TEST_TAG }} "python -c 'import boto3; print(boto3.__version__)'"
      - uses: actions/checkout@v4
      # - name: Run application-specific GitHub Action test, e.g. a semantic-release dry-run
      - name: Gather output
        id: set-output
        run: |
          PYTHON_VERSION=$(docker run --rm ${{ env.TEST_TAG }} "python --version" 2>&1 | awk '{print $2}')
          echo "python_version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
          NODE_VERSION=$(docker run --rm ${{ env.TEST_TAG }} "node --version" 2>&1 | awk -F 'v' '{print $2}')
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
    outputs:
      python_version: ${{ steps.set-output.outputs.python_version }}
      node_version: ${{ steps.set-output.outputs.node_version }}

  push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Update environment variables
        id: vars
        run: |
          echo "IMAGE_NAME=$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV
      - id: extract-versions
        run: |
          PYTHON_MAJOR_MINOR=$(echo ${{ needs.test.outputs.python_version }} | awk -F. '{print $1"."$2}')
          NODE_MAJOR_MINOR=$(echo ${{ needs.test.outputs.node_version }} | awk -F. '{print $1"."$2}')
          echo "python_version=${{ needs.test.outputs.python_version }}" >> $GITHUB_OUTPUT
          echo "python_major_minor=$PYTHON_MAJOR_MINOR" >> $GITHUB_OUTPUT
          echo "node_version=${{ needs.test.outputs.node_version }}" >> $GITHUB_OUTPUT
          echo "node_major_minor=$NODE_MAJOR_MINOR" >> $GITHUB_OUTPUT
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,enable=true,prefix=py${{ steps.extract-versions.outputs.python_version }}-node${{ steps.extract-versions.outputs.node_version }}-,suffix=,format=short
          labels: |
            version.python=${{ steps.extract-versions.outputs.python_version }}
            version.nodejs=${{ steps.extract-versions.outputs.node_version }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            NODE_VERSION=${{ env.NODE_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Gather output
        id: set-output
        run: |
          echo "image_uri=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> "$GITHUB_OUTPUT"
    outputs:
      image_uri: ${{ steps.set-output.outputs.image_uri }}

  test-action:
    needs: push
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.push.outputs.image_uri }}
    steps:
      - run: python --version
      - run: node --version
      - run: semantic-release --version
      - run: invoke --version
      - run: cfn-lint --version
      - run: pylint --version
      - name: boto3 version
        run: python -c "import boto3; print(boto3.__version__)"
      - uses: actions/checkout@v4
      - run: ls -alh
      - run: chown -R $(whoami) .
      - run: ls -alh
      - run: semantic-release --dry-run
        env:
          GIT_AUTHOR_NAME: berghmans-bot
          GIT_AUTHOR_EMAIL: berghmans-bot@no-reply.com
          GIT_COMMITTER_NAME: berghmans-bot
          GIT_COMMITTER_EMAIL: berghmans-bot@no-reply.com
      - name: Gather output
        id: set-output
        run: |
          PYTHON_VERSION=$(python --version 2>&1 | awk '{print $2}')
          echo "python_version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
          NODE_VERSION=$(node --version 2>&1 | awk -F 'v' '{print $2}')
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
    outputs:
      python_version: ${{ steps.set-output.outputs.python_version }}
      node_version: ${{ steps.set-output.outputs.node_version }}
