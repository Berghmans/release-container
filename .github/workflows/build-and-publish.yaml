name: build-test-publish

on:
  workflow_run:
    workflows: [berghmans-checks]
    types: [completed]
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/release-container
  PYTHON_VERSION: "3.12.3"
  NODE_VERSION: "20.x"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Update environment variables
        id: vars
        run: |
          echo "IMAGE_NAME=$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,enable=true,prefix=py${{ env.PYTHON_VERSION }}-node${{ env.NODE_VERSION }}-,suffix=,format=short
      - uses: docker/build-push-action@v5
        id: push
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            NODE_VERSION=${{ env.NODE_VERSION }}
      - name: Gather output
        id: set-output
        run: |
          echo "image_uri=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> "$GITHUB_OUTPUT"
          PYTHON_VERSION=$(docker run --rm ${{ steps.set-output.outputs.image_uri }} python --version 2>&1 | awk '{print $2}')
          echo "python_version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
          NODE_VERSION=$(docker run --rm ${{ steps.set-output.outputs.image_uri }} node --version 2>&1 | awk -F 'v' '{print $2}')
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
    outputs:
      image_uri: ${{ steps.set-output.outputs.image_uri }}
      python_version: ${{ steps.set-output.outputs.python_version }}
      node_version: ${{ steps.set-output.outputs.node_version }}

  test-action:
    needs: build-and-push
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-and-push.outputs.image_uri }}
    steps:
      - run: python --version
      - run: node --version
      - run: semantic-release --version
      - uses: actions/checkout@v4
      # - name: Run application-specific GitHub Action test, e.g. a semantic-release dry-run

  publish:
    needs: [build-and-push, test-action]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: extract-versions
        run: |
          PYTHON_MAJOR_MINOR=$(echo ${{ needs.build-and-push.outputs.python_version }} | awk -F. '{print $1"."$2}')
          NODE_MAJOR_MINOR=$(echo ${{ needs.build-and-push.outputs.node_version }} | awk -F. '{print $1"."$2}')
          echo "python_major_minor=$PYTHON_MAJOR_MINOR" >> $GITHUB_OUTPUT
          echo "node_major_minor=$NODE_MAJOR_MINOR" >> $GITHUB_OUTPUT
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=py${{ needs.build-and-push.outputs.python_version }}-node${{ needs.build-and-push.outputs.node_version }}
            type=raw,value=py${{ steps.extract-versions.outputs.python_major_minor }}-node${{ steps.extract-versions.outputs.node_major_minor }}
      - name: Tag image as latest
        run: |
          docker pull ${{ needs.build-and-push.outputs.image_uri }}

          IFS=',' read -r -a TAGS <<< "${{ steps.meta.outputs.tags }}"
          for TAG in "${TAGS[@]}"; do
            docker tag ${{ needs.build-and-push.outputs.image_uri }} $TAG
            docker push $TAG
          done
