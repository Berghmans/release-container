name: build-test-publish

on:
  workflow_run:
    workflows: [berghmans-checks]
    types: [completed]
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/release-container
  PYTHON_VERSION: "3.12.3"
  NODE_VERSION: "20.x"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Update environment variables
        id: vars
        run: |
          echo "IMAGE_NAME=$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
      - uses: docker/build-push-action@v5
        id: push
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            NODE_VERSION=${{ env.NODE_VERSION }}
      - name: Gather output
        id: set-output
        run: echo "image_uri=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> "$GITHUB_OUTPUT"
    outputs:
      image_uri: ${{ steps.set-output.outputs.image_uri }}

  test-action:
    needs: build-and-push
    runs-on: ubuntu-latest
    container:
      image: ${{ needs.build-and-push.outputs.image_uri }}
    steps:
      - run: python --version
      - run: node --version
      - uses: actions/checkout@v4
      # - name: Run application-specific GitHub Action test, e.g. a semantic-release dry-run

  # tag-as-latest:
  #   needs: test-action
  #   runs-on: ubuntu-latest
  #   if: success()

  #   steps:
  #     - name: Log in to GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Tag image as latest
  #       run: |
  #         docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:py${{ env.PYTHON_VERSION }}-n${{ env.NODE_VERSION }}-${{ env.SHORT_SHA }}
  #         docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:py${{ env.PYTHON_VERSION }}-n${{ env.NODE_VERSION }}-${{ env.SHORT_SHA }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:py${{ env.PYTHON_VERSION }}-n${{ env.NODE_VERSION }}
  #         docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:py${{ env.PYTHON_VERSION }}-n${{ env.NODE_VERSION }}
