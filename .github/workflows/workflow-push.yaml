name: push

on:
  workflow_call:
    inputs:
      ref:
        description: "The git ref to test"
        required: true
        type: string
      sha:
        description: "The git sha to test"
        required: true
        type: string
      image_name:
        description: "The name of the image to push"
        required: true
        type: string
      python_version:
        description: "The Python version to use for building the image"
        required: true
        type: string
      node_version:
        description: "The Node.js version to use for building the image"
        required: true
        type: string
      publish:
        type: boolean
        description: "Whether to publish the image"
        required: true
    outputs:
      image_uri:
        description: "The URI of the pushed image"
        value: ${{ jobs.run.outputs.image_uri }}

env:
  TEST_TAG: "release-container:test"

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      # Local build first to determine versions
      - uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          platforms: linux/amd64
          tags: ${{ env.TEST_TAG }}
          build-args: |
            PYTHON_VERSION=${{ inputs.python_version }}
            NODE_VERSION=${{ inputs.node_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - id: versions
        run: |
          PYTHON_VERSION=$(docker run --rm ${{ env.TEST_TAG }} "python --version" 2>&1 | awk '{print $2}')
          PYTHON_MAJOR_MINOR=$(echo "${PYTHON_VERSION}" | awk -F. '{print $1"."$2}')
          echo "python_version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
          echo "python_major_minor=$PYTHON_MAJOR_MINOR" >> $GITHUB_OUTPUT

          NODE_VERSION=$(docker run --rm ${{ env.TEST_TAG }} "node --version" 2>&1 | awk -F 'v' '{print $2}')
          NODE_MAJOR_MINOR=$(echo "${NODE_VERSION}" | awk -F. '{print $1"."$2}')
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "node_major_minor=$NODE_MAJOR_MINOR" >> $GITHUB_OUTPUT

      # Metadata action to determine the tags and labels for the image
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/${{ inputs.image_name }}
          tags: |
            type=schedule,pattern=py${{ steps.versions.outputs.python_major_minor }}-{{date 'YYYYMMDD'}}
            type=ref,event=branch,prefix=py${{ steps.versions.outputs.python_major_minor }}-
            type=ref,event=pr,prefix=py${{ steps.versions.outputs.python_major_minor }}-
            type=semver,pattern=py${{ steps.versions.outputs.python_major_minor }}-{{version}}
            type=semver,pattern=py${{ steps.versions.outputs.python_major_minor }}-{{major}}.{{minor}}
            type=semver,pattern=py${{ steps.versions.outputs.python_major_minor }}-{{major}}
            type=sha,format=long,prefix=py${{ steps.versions.outputs.python_major_minor }}-
            type=raw,value=latest,enable=${{ (inputs.ref == 'refs/heads/main' || startsWith(inputs.ref, 'refs/tags/')) && steps.versions.outputs.python_major_minor == 'py3.12' }}
            type=raw,value=py${{ steps.versions.outputs.python_major_minor }},enable=${{ inputs.ref == 'refs/heads/main' || startsWith(inputs.ref, 'refs/tags/') }}
          flavor: |
            latest=false
      - run: |
          echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV
      - uses: docker/login-action@v3
        if: ${{ inputs.publish }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ inputs.publish }}
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            PYTHON_VERSION=${{ inputs.python_version }}
            NODE_VERSION=${{ inputs.node_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}
      - id: set-output
        run: |
          echo "image_uri=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> "$GITHUB_OUTPUT"
    outputs:
      image_uri: ${{ steps.set-output.outputs.image_uri }}
